(ns cljs-api-gen.repo-docs
  (:require
    [clojure.java.shell :refer [sh]]
    [cljs-api-gen.config :refer [*docs-repo-dir*
                                 docs-branch]]
    [me.raynes.fs :refer [mkdir exists?]]
    [cljs-api-gen.repo-cljs :refer [*cljs-version*
                                    *clj-version*]]
    ))

(defn git
  [& args]
  (apply sh "git" (concat args [:dir *docs-repo-dir*])))

(defn docs-tag->cljs
  [v]
  (let [m (re-find #"-\d+" v)
        number (subs m 1)]
    (str "r" number)))

(defn get-current-branch []
  (:out (git "rev-parse" "--abbrev-ref" "HEAD")))

(defn get-current-tag []
  (:out (git "describe" "--tags")))

(defn branch-exists?
  [branch]
  (zero? (:exit (git "show-ref" "--verify" branch))))

(defn init! []
  (when-not (exists? *docs-repo-dir*)
    (mkdir *docs-repo-dir*)
    (git "init"))
  (when-not (= docs-branch (get-current-branch))
    (if (branch-exists? docs-branch)
      (git "checkout" docs-branch)
      (git "checkout" "--orphan" docs-branch))))

(defn clear! []
  (git "rm" "-rf" "."))

(defn commit! []
  (let [msg (str *cljs-version* "\n"
                 "\n"
                 "- auto-generated by:\n"
                 "  https://github.com/cljsinfo/api-refs\n"
                 "\n"
                 "- parsed from:\n"
                 "  ClojureScript " *cljs-version* "\n"
                 "  Clojure " *clj-version* "\n")]
    (git "add" ".")
    (git "commit" "-m" msg)
    (git "tag" *cljs-version*)))

