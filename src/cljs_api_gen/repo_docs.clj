(ns cljs-api-gen.repo-docs
  (:require
    [clojure.java.shell :refer [sh]]
    [cljs-api-gen.config :refer [*repo-version*
                                 *docs-repo-dir*
                                 docs-branch]]
    [cljs-api-gen.repo-cljs :refer [cljs-tag->version
                                    clj-tag->version]]
    [me.raynes.fs :refer [mkdir exists?]]
    ))

(defn git-docs-repo!
  [& args]
  (apply sh "git" (concat args [:dir *docs-repo-dir*])))

(defn docs-repo-branch
  []
  (let [result (git-docs-repo! "rev-parse" "--abbrev-ref" "HEAD")]
    (:out result)))

(defn docs-repo-branch-exists?
  [branch]
  (let [result (git-docs-repo! "show-ref" "--verify" branch)]
    (zero? (:exit result))))

(defn prepare-docs-repo!
  []
  ;; create repo if needed
  (when-not (exists? *docs-repo-dir*)
    (mkdir *docs-repo-dir*)
    (git-docs-repo! "init"))

  ;; change to docs branch
  (when-not (= docs-branch (docs-repo-branch))
    (if (docs-repo-branch-exists? docs-branch)
      (git-docs-repo! "checkout" docs-branch)
      (git-docs-repo! "checkout" "--orphan" docs-branch))))

(defn get-docs-repo-version
  []
  (let [result (git-docs-repo! "describe" "--tags")]
    (:out result)))

(defn docs-version->cljs-version
  [v]
  (let [m (re-find #"-\d+" v)
        number (subs m 1)]
    (str "r" number)))

(defn clear-docs-repo!
  []
  (git-docs-repo! "rm" "-rf" "."))

(defn commit-docs-repo!
  []
  (let [clj-t  (get *repo-version* "clojure")
        cljs-t (get *repo-version* "clojurescript")
        clj-v  (clj-tag->version clj-t)
        cljs-v (cljs-tag->version cljs-t)
        msg (str cljs-v "\n"
                 "\n"
                 "- auto-generated by:\n"
                 "  https://github.com/cljsinfo/api-docs-generator\n"
                 "\n"
                 "- parsed from:\n"
                 "  ClojureScript " cljs-v "\n"
                 "  Clojure " clj-v "\n")]
    (git-docs-repo! "add" ".")
    (git-docs-repo! "commit" "-m" msg)
    (git-docs-repo! "tag" cljs-v)))

