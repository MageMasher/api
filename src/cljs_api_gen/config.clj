(ns cljs-api-gen.config)

;; location of the clojure & clojurescript repos to parse
(def repo-dir "repos")

(def docs-repo-dir "output-repo")

(def docs-branch "docs")
(def examples-branch "examples")

(def edn-output-file "autodocs.edn")

;; location of the documents generated by this program
(def ^:dynamic *output-dir* nil)

;; Table of namespaces that we will parse
(def cljs-ns-paths
  ; NS                        REPO             FILE               PATH IN REPO
  {"cljs.core"              {"clojurescript" {"core.cljs"        "src/cljs/cljs"
                                              "core.clj"         "src/clj/cljs"
                                              "analyzer.clj"     "src/clj/cljs"
                                              "compiler.clj"     "src/clj/cljs"}
                             "clojure"       {"core.clj"         "src/clj/clojure"
                                              "core_deftype.clj" "src/clj/clojure"
                                              "core_print.clj"   "src/clj/clojure"
                                              "core_proxy.clj"   "src/clj/clojure"}}
   "cljs.test"              {"clojurescript" {"test.cljs"        "src/cljs/cljs"
                                              "test.clj"         "src/clj/cljs"}}
   "cljs.repl"              {"clojurescript" {"repl.clj"         "src/clj/cljs"
                                              "repl.cljs"        "src/cljs/cljs"}}
   "cljs.reader"            {"clojurescript" {"reader.cljs"      "src/cljs/cljs"}}
   "clojure.set"            {"clojurescript" {"set.cljs"         "src/cljs/clojure"}}
   "clojure.string"         {"clojurescript" {"string.cljs"      "src/cljs/clojure"}}
   "clojure.walk"           {"clojurescript" {"walk.cljs"        "src/cljs/clojure"}}
   "clojure.zip"            {"clojurescript" {"zip.cljs"         "src/cljs/clojure"}}
   "clojure.data"           {"clojurescript" {"data.cljs"        "src/cljs/clojure"}}})

