(ns cljs-api-gen.catalog
  (:require
    [clansi.core :refer [style]]
    [clojure.string :refer [join]]
    [clojure.java.shell :refer [sh]]
    [me.raynes.fs :refer [mkdir exists?]]
    [cljs-api-gen.config :refer [*output-dir*]]
    [cljs-api-gen.parse :refer [parse-all]]
    [cljs-api-gen.repo-cljs :refer [get-cljs-tags-to-parse
                                    with-checkout!
                                    cljs-tag->version
                                    *cljs-tag*
                                    *cljs-date*
                                    *clj-tag*
                                    *cljs-version*
                                    *clj-version*]]
    [cljs-api-gen.result :refer [get-result]]
    [cljs-api-gen.write :refer [dump-result!
                                get-last-written-result]]
    ))

;;----------------------------------------------------------------------
;; Catalog Repo Operations
;;----------------------------------------------------------------------

(defn git
  [& args]
  (apply sh "git" (concat args [:dir *output-dir*])))

(defn catalog-tag->cljs
  [v]
  (let [m (re-find #"-\d+" v)
        number (subs m 1)]
    (str "r" number)))

(defn catalog-tag []
  (:out (git "describe" "--tags")))

(defn catalog-init! []
  (when-not (exists? *output-dir*)
    (mkdir *output-dir*)
    (git "init")))

(defn catalog-clear! []
  (git "rm" "-rf" "."))

(defn catalog-commit! []
  (let [msg (str *cljs-version* "\n"
                 "\n"
                 "- auto-generated by:\n"
                 "  https://github.com/cljsinfo/cljs-api-docs\n"
                 "\n"
                 "- parsed from:\n"
                 "  ClojureScript " *cljs-version* "\n"
                 "  Clojure " *clj-version* "\n")]
    (git "add" ".")
    (git "commit" "-m" msg)
    (git "tag" *cljs-version*)))

;;----------------------------------------------------------------------
;; Catalog Creation
;;----------------------------------------------------------------------

(defn print-summary*
  [parsed]
  (let [ns-groups (group-by :ns parsed)
        pairs (sort-by first ns-groups)]
    (doseq [[ns- symbols] pairs]
      (printf "    %-24s %4s = %s\n"
        ns-
        (count symbols)
        (let [type-groups (group-by :type symbols)
              pairs (sort-by first type-groups)]
          (join " + "
            (for [[type- symbols] pairs]
              (let [total (count symbols)]
                (str total " " (cond-> type- (> total 1) (str "s")))))))))))

(defn print-summary
  [parsed]
  (println " Syntax API:")
  (print-summary* (:syntax parsed))
  (println " Library API:")
  (print-summary* (:library parsed))
  (println " Compiler API:")
  (print-summary* (:compiler parsed)))

(defn create-catalog!
  "Create a docs catalog repo, or resume progress from its previous state.

  The docs catalog repo has one commit per cljs version, with each commit containing:
    - doc files for that version
    - current history information for each symbol
    - a git tag with that version

  The argument `n-or-all` is either:
    - keyword `:all` to catalog whatever versions are remaining
    - number `n` of the next remaining versions to catalog before stopping.
  "
  [:keys [version
          catalog?
          skip-pages?
          skip-parse?]
   :or {version :latest
        catalog? false
        skip-pages? false
        skip-parse? false}]

  (println "Outputting to " (style *output-dir* :cyan))

  (catalog-init!)

  (let [prev-result (atom (get-last-written-result))
        latest-tag (when @prev-result
                     (catalog-tag->cljs (catalog-tag)))
        tags (get-cljs-tags-to-parse latest-tag n-or-all)]

    (doseq [tag tags]
      (with-checkout! tag

        (println "\n=========================================================")
        (println "\nChecked out ClojureScript " (style *cljs-tag* :yellow))
        (println "with Clojure:" (style *clj-tag* :yellow))

        (println "\nParsing...")
        (let [parsed (parse-all)]
          (print-summary parsed)

          (catalog-clear!)

          (println "\nWriting docs to" (style *output-dir* :cyan))
          (let [result (get-result parsed @prev-result)]
            (dump-result! result)
            (reset! prev-result result))

          (println "\nCommitting docs at tag" *cljs-version* "...")
          (catalog-commit!))

        (println "\nDone.")))

    (println (style "Success!" :green))))

(defn create-single-version!
  [tag]

  (with-checkout! tag

    (println "\n=========================================================")
    (println "\nChecked out ClojureScript " (style *cljs-tag* :yellow))
    (println "with Clojure:" (style *clj-tag* :yellow))

    (println "\nParsing...")
    (let [parsed (parse-all)]

      (print-summary parsed)

      (println "\nWriting docs to" (style *output-dir* :cyan))
      (let [result (get-result parsed)]
        (dump-result! result)))

    (println (style "Success!" :green))))
