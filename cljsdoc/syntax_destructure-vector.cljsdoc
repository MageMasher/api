===== Name
syntax/destructure-vector

===== Display
destructure []

===== Usage
[arg1 arg2 & args :as name]

===== Description

A helpful shorthand for destructuring a sequence into multiple names.

```clj
(let [ [a b c]   ;; <-- destructure vector
       [1 2 3] ]
  (println a b c))
;; 1 2 3
```

Use `& foo` to name the rest of the items in the sequence:

```clj
(let [ [a b c & d]
       [1 2 3 4 5] ]
  (println a b c d))
;; 1 2 3 (4 5)
```

Use `:as foo` to name the original value:

```clj
(let [ [a b c & d :as whole]
       [1 2 3 4 5] ]
  whole)
;;=> [1 2 3 4 5]
```

Use the special destructuring vector in place of any local name binding in the
following forms:

- `(let [...])`
- `(fn [...])`
- `(loop [...])`

===== Related
syntax/destructure-map

===== Example#acab87

Use destructure vectors in function parameters:

```clj
(defn foo [[a b] c]
  (+ a b c))

(foo [1 2] 3)
;;=> 6
```

===== Example#fa4e05

Destructure vectors can be nested:

```clj
(let [ [[a b] c]
       [[1 2] 3] ]
  (println a b c))
;; 1 2 3
```

