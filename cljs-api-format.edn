{:version "0.0-3297"

 :history {:versions ("0.0-3297" ...) ;; versions in reverse order

           ;; maps versions to details
           :details {"0.0-3297" {;; clojurescript
                                 :tag         "r3297"
                                 :date        "2015-05-23"

                                 ;; clojure
                                 :clj-version      "1.7.0-beta2"
                                 :clj-tag          "clojure-1.7.0-beta2"

                                 ;; tools.reader
                                 :treader-version  "0.9.2"
                                 :treader-tag      "tools.reader-0.9.2"

                                 ;; google closure library/compiler
                                 :gclosure-com     "20140625"
                                 :gclosure-lib     "0.0-20150505-021ed5b3"}
                      ...}}

 ;; symbols not ported from clojure
 :clj-not-cljs #{"clojure.core/the-ns"
                 "clojure.core/create-struct"
                 ...}


 ;; map full symbol names to their API data
 :symbols {"cljs.core/->"
             {;; auto-parsed docs

              :full-name         "cljs.core/->"
              :full-name-encode  "cljs.core/-GT" ;; used for filenames
              :ns                "cljs.core"
              :name              "->"
              :name-encode       "-GT"

              ;; if this symbol is a member of a type (e.g. cljs.core/PersistentArrayMap.fromArrays)
              :parent-type "PersistentArrayMap"

              ;; example data here taken from cljs.core/keys
              :type              "function"
              :docstring         "Returns a sequence of the map's keys."
              :signature         ["[x & forms]"]
              :history           [["+" "0.0-927"]]
              :source {:code     "... full source code ..."
                       :title    "Source code"
                       :repo     "clojurescript"
                       :tag      "r3297"
                       :filename "src/main/cljs/cljs/core.cljs"
                       :lines    [7559 7563]}

              ;; Same structure as `:source` for extra sources.
              ;; (For example, some symbols have both function and macro
              ;;  implementations, so the main `:source` will have a `:title`
              ;;  set to "Function Code", and there will be an extra source
              ;;  with the `:title` attributes set to "Macro Code".)
              :extra-sources [{...}]

              ;; equivalent symbol in Clojure (if it exists)
              :clj-equiv {:full-name "clojure.core/->"
                          :url "http://clojure.github.io/clojure/branch-master/clojure.core-api.html#clojure.core/->"}

              :syntax-equiv {:clj-url "..."
                             :edn-url "..."}

              ;; the cljsdoc file which the rest of the attributes are deduced from
              :cljsdoc-url "https://github.com/cljsinfo/cljs-api-docs/blob/master/cljsdoc/cljs.core/-GT.cljsdoc"

              ;; manually added docs from cljsdoc/ files

              :description "... description in markdown ..."
              :examples [{:id "a34fe2"
                          :content "... example in markdown ..."}]
              :related ["cljs.core/foo" "cljs.core/bar"]

              ;; the full name where this symbol moved to (example cljs.core/try -> special/try)
              :moved "cljs.core/another-name"

              ;; Usage forms.
              ;; Can be specified explicitly, but if missing, it will be built
              ;; from the :signature.

              ;; For example, given the :signature ["[foo]" "[foo bar]"],
              ;; and the :name "my-func", the following :usage will be generated.
              :usage ["(my-func foo)"
                      "(my-func foo bar)"]

              ;; Syntax entries do not have :signature because they are not functions.
              ;; Thus, we explicitly specify :usage (from syntax/inst-literal)
              :usage ["#inst \"yyyy-mm-dd\""
                      "#inst \"yyyy-mm-ddThh:mm:ss\""
                      "#inst \"yyyy-mm-ddThh:mm:ssZ\""
                      "#inst \"yyyy-mm-ddThh:mm:ss-hh:mm\""]

              ;; alternate display name (if :full-name is a pseudo-symbol that shouldn't be displayed)
              :display "#queue [] literal" ;; (from syntax/queue-literal)
                :display "if" ;; (another example, from special/if)

              ;; what it's usually called
              :known-as "thread first" ;; (from cljs.core/->)

              ;; some special forms are only available in the REPL
              :repl-only? false}

           ...}


 :namespaces { ...}

 ;; API categories (i.e. syntax, library, compiler)
 :api {
       ;; Library API
       :library {
                 ;; set of full symbol names present in this API
                 :symbol-names #{"cljs.core/*1"
                                 "cljs.core/reduce"
                                 "cljs.core/map"
                                 ...}

                 ;; set of full namespace names present in this API
                 :namespace-names #{"cljs.core"
                                    "cljs.js"
                                    ...}

                 ;; history of changes for each version
                 :changes
                  {"0.0-3297" {:added   #{"clojure.browser.repl/bootstrap"
                                          "clojure.browser.repl/load-queue"}
                               :removed #{"cljs.core/load-file*"}}
                   ...}}


       ;; Syntax API (same format)
       :syntax {:symbol-names #{}
                :namespace-names #{}
                :changes []}

       ;; Compiler API (same format)
       :compiler {:symbol-names #{}
                  :namespace-names #{}
                  :changes []}}}
