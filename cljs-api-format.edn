{;; release data
 :release {;; clojurescript
           :cljs-version     "0.0-3297",
           :cljs-tag         "r3297",
           :cljs-date        "2015-05-23",

           ;; clojure
           :clj-version      "1.7.0-beta2",
           :clj-tag          "clojure-1.7.0-beta2",

           ;; tools.reader
           :treader-version  "0.9.2",
           :treader-tag      "tools.reader-0.9.2",

           ;; google closure library
           :gclosure-lib     "0.0-20150505-021ed5b3"},

 ;; symbols not ported from clojure
 :clj-not-cljs #{"clojure.core/the-ns"
                 "clojure.core/create-struct"
                 ;; ...
                 }

 ;; map full symbol names to their API data
 :symbols {"cljs.core/keys"
             {;; auto-parsed docs

              :full-name         "cljs.core/keys",
              :full-name-encode  "cljs.core_keys", ;; used for filenames
              :ns                "cljs.core",
              :name              "keys",
              :type              "function",
              :docstring         "Returns a sequence of the map's keys.",
              :signature         ["[hash-map]"],
              :history           [["+" "0.0-927"]],
              :source {:code     "... full source code ...",
                       :repo     "clojurescript"
                       :tag      "r3297"
                       :filename "src/main/cljs/cljs/core.cljs",
                       :lines    [7559 7563]},

              ;; equivalent symbol in Clojure (if applicable)
              :clj-symbol        "clojure.core/keys",

              ;; syntax usage strings
              ;; (see cljsdoc/syntax_inst-literal.cljsdoc for example)
              :usage []

              ;; alternate display name (if :full-name is a pseudo-symbol that shouldn't be displayed)
              ;; for example, syntax/queue-literal should be displayed "#queue [] literal"
              :display ""

              ;; syntax equivalency to clojure or edn if applicable
              :clj-doc "... external URL for clojure syntax doc ..."
              :edn-doc "... external URL for edn syntax doc ..."

              ;; manually added docs from cljsdoc/ files

              :description "... description in markdown ..."
              :examples [{:id "a34fe2"
                          :content "... example in markdown ..."}]
              :related ["cljs.core/foo" "cljs.core/bar"]
              }

           ;; ...
           }

 ;; API categories (i.e. syntax, library, compiler)
 :api {
       ;; Library API
       :library {
                 ;; set of full symbol names present in this API
                 :symbol-names #{"cljs.core/*1"
                                 "cljs.core/reduce"
                                 "cljs.core/map"
                                 ;; ...
                                 }

                 ;; history of changes (from oldest to newest)
                 :changes
                 [{
                   ;; abridged version info
                   :cljs-version     "0.0-3115",
                   :cljs-date        "2015-03-15",
                   :clj-version      "1.6.0",
                   :treader-version  "0.9.2",
                   :gclosure-lib     "0.0-20140718-946a7d39",

                   ;; symbols added/removed in this version
                   :added   #{"clojure.browser.repl/bootstrap"
                              "clojure.browser.repl/load-queue"},
                   :removed #{"cljs.core/load-file*"}}
                  ;; ...
                  ]}

       ;; Syntax API (same format)
       :syntax {:symbol-names {}
                :changes []}

       ;; Compiler API (same format)
       :compiler {:symbol-names {}
                  :changes []}
 }
}
